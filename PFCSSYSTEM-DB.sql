CREATE TABLE SERVICE(
	SERV_ID				SERIAL					PRIMARY KEY,
	SERV_TYPE			VARCHAR(35)			UNIQUE          NOT NULL,
	SERV_PRICE			NUMERIC(9,2)		DEFAULT 0.0
);

CREATE TABLE EMPLOYEE(
	EMP_ID				SERIAL 				PRIMARY KEY,
	EMP_FNAME			VARCHAR(100)		NOT NULL,
 	EMP_LNAME			VARCHAR(100)		NOT NULL,
	EMP_ADDRESS			VARCHAR(100)		NOT NULL,
	EMP_BIRTHDATE		DATE				DEFAULT CURRENT_TIMESTAMP,
	EMP_CONTACT_NUM		VARCHAR(20)			UNIQUE          NOT NULL,	
	EMP_POSITION		VARCHAR(30)			NOT NULL,
 	EMP_MANAGER         INT                 REFERENCES EMPLOYEE (EMP_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE MEMBER(
	MEM_ID				SERIAL					PRIMARY KEY,
	MEM_FNAME			VARCHAR(100)			NOT NULL,
	MEM_LNAME			VARCHAR(100)			NOT NULL,
	MEM_BIRTHDATE		DATE					DEFAULT CURRENT_TIMESTAMP,
	MEM_ADDRESS			VARCHAR(100)			NOT NULL,
	MEM_TELEPHONE		VARCHAR(20)				UNIQUE          NOT NULL,
	MEM_PHYSICAL_ACT	VARCHAR(100)			DEFAULT 'N/A',
	MEM_MED_AILMENT		VARCHAR(100)			DEFAULT 'N/A',
	MEM_WEIGHT			NUMERIC					NOT NULL,
	MEM_HEIGHT			NUMERIC					NOT NULL,
	MEM_BP				VARCHAR(35)				NOT NULL,
	MEM_GENDER			VARCHAR(20)				NOT NULL,
	MEM_STATUS			VARCHAR(35)				NOT NULL,
	MEM_TYPE			VARCHAR(35)				NOT NULL,
	MEM_PREV_GYM		VARCHAR(50)				DEFAULT 'N/A',
	MEM_MEMBERSHIP_START_DATE     TIMESTAMP                DEFAULT CURRENT_TIMESTAMP NOT NULL,
 	MEM_MEMBERSHIP_END_DATE       TIMESTAMP                DEFAULT CURRENT_TIMESTAMP + INTERVAL '365 days' NOT NULL,
	EMP_ID						  INT					   REFERENCES EMPLOYEE ON DELETE CASCADE ON UPDATE CASCADE NOT NULL
);

	
CREATE TABLE TRANSACTION_HISTORY(
	TRAN_ID 			SERIAL 				PRIMARY KEY,
	MEM_ID 				INT 				REFERENCES MEMBER ON DELETE CASCADE ON UPDATE CASCADE NOT NULL,
	TRAN_DATE 			TIMESTAMP 			DEFAULT CURRENT_TIMESTAMP,
	SERV_ID 			INT 				REFERENCES SERVICE ON DELETE CASCADE ON UPDATE CASCADE,
	TRAN_PRICE 			NUMERIC(9,2) 		NOT NULL,
	TRAN_TENDERED 		NUMERIC(9,2) 		NOT NULL
);


CREATE TABLE NOTIFICATION(
	NOTIF_ID			SERIAL 				PRIMARY KEY,
	NOTIF_CONTENT		VARCHAR(255)		UNIQUE			NOT NULL,
	NOTIF_DATE			TIMESTAMP			DEFAULT CURRENT_TIMESTAMP,
	MEM_ID				INT 				REFERENCES MEMBER ON DELETE CASCADE ON UPDATE CASCADE NOT NULL,
	EMP_ID				INT 				REFERENCES EMPLOYEE ON DELETE CASCADE ON UPDATE CASCADE NOT NULL
);

CREATE TABLE MONTHLY_SERVICE_LOG(
	MON_SERVICE_LOG_ID			SERIAL					  PRIMARY KEY,
	MEM_ID						INT 					  REFERENCES MEMBER ON DELETE CASCADE ON UPDATE CASCADE NOT NULL,
	SERV_ID						INT 					  REFERENCES SERVICE ON DELETE CASCADE ON UPDATE CASCADE NOT NULL,
	EMP_ID						INT 					  REFERENCES EMPLOYEE ON DELETE CASCADE ON UPDATE CASCADE,
	MON_SERVICE_START_DATE     TIMESTAMP                  DEFAULT CURRENT_TIMESTAMP NOT NULL,
 	MON_SERVICE_END_DATE       TIMESTAMP                  DEFAULT CURRENT_TIMESTAMP + INTERVAL '30 days' NOT NULL
	
);


--DUPLICATE SERVICE CHECKER (UPDATE)
CREATE OR REPLACE FUNCTION FNC_UPDATE_SERVICE()
RETURNS TRIGGER AS $$
BEGIN
    IF EXISTS (SELECT 1 FROM SERVICE WHERE SERV_TYPE = NEW.SERV_TYPE AND SERV_ID != OLD.SERV_ID) THEN
        RAISE EXCEPTION 'SERVICE ALREADY EXISTS';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE TRIGGER TRG_UPDATE_SERVICE
BEFORE UPDATE ON SERVICE	
FOR EACH ROW
EXECUTE FUNCTION FNC_UPDATE_SERVICE();

--DUPLICATE CONTACT NUMBER CHECKER
CREATE OR REPLACE FUNCTION FNC_UPDATE_MEMBER_CONTACT()
RETURNS TRIGGER AS $$
BEGIN
	IF EXISTS (SELECT 1 FROM MEMBER WHERE MEM_TELEPHONE = NEW.MEM_TELEPHONE AND MEM_ID != OLD.MEM_ID) THEN
		RAISE EXCEPTION 'PHONE NUMBER IS ALREADY USED';
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE TRIGGER TRG_UPDATE_MEMBER_CONTACT
BEFORE UPDATE ON MEMBER
FOR EACH ROW
EXECUTE FUNCTION FNC_UPDATE_MEMBER_CONTACT();

--PREVENTS ADMIN DELETE AND SETS NULL IF DELETED EMPLOYEE IS ASSOCIATED IA A SERVICE_LOG
CREATE OR REPLACE FUNCTION FNC_DELETE_EMPLOYEE()
RETURNS TRIGGER AS $$
BEGIN
	IF(SELECT EMP_POSITION FROM EMPLOYEE WHERE EMP_ID = OLD.EMP_ID) = 'ADMINISTRATOR' THEN
		RAISE EXCEPTION 'UNABLE TO DELETE EMPLOYEE: THE EMPLOYEE HOLDS AN ADMINISTRATOR POSITION';
	END IF; 
	
	UPDATE MONTHLY_SERVICE_LOG
    SET EMP_ID = NULL
    WHERE EMP_ID = OLD.EMP_ID;
	RETURN OLD;
END;
$$ LANGUAGE PLPGSQL;

--PREVENTS SERVICE DELETE IF SERVICE IS IN USE
CREATE OR REPLACE TRIGGER TRG_DELETE_EMPLOYEE
BEFORE DELETE ON EMPLOYEE
FOR EACH ROW
EXECUTE FUNCTION FNC_DELETE_EMPLOYEE();

CREATE OR REPLACE FUNCTION FNC_SERVICEDELETE()
RETURNS TRIGGER AS $$
BEGIN
	IF(SELECT 1 FROM MONTHLY_SERVICE_LOG WHERE SERV_ID = OLD.SERV_ID) THEN
		RAISE EXCEPTION 'Unable to delete currently in use service';
	END IF;
	RETURN OLD;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER TRG_SERVICEDELETE
BEFORE DELETE ON SERVICE
FOR EACH ROW
EXECUTE FUNCTION FNC_SERVICEDELETE();


--Tester
INSERT INTO MEMBER VALUES(DEFAULT, 'EL', 'SANTIAGO', '2001-04-12', 'SAN JOSE', '09974211422', NULL, NULL, 120, 160, '140/60', 'MALE', 'SINGLE', 'STUDENT', NULL, '2023-07-20 13:30:05', '2024-07-20 13:30:05');

INSERT INTO MONTHLY_SERVICE_LOG VALUES(DEFAULT, 1, 1, NULL, '2024-05-21 13:30:00', '2024-06-21 13:30:00');

